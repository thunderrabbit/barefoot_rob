<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>atom on Barefoot Rob</title>
    <link>https://new.robnugen.com/tags/atom/</link>
    <description>Recent content in atom on Barefoot Rob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 May 2019 08:57:55 +0900</lastBuildDate>
    
	<atom:link href="https://new.robnugen.com/tags/atom/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Marble Track 3 website easier to write</title>
      <link>https://new.robnugen.com/journal/2019/05/06/marble-track-3-website-easier-to-write/</link>
      <pubDate>Mon, 06 May 2019 08:57:55 +0900</pubDate>
      
      <guid>https://new.robnugen.com/journal/2019/05/06/marble-track-3-website-easier-to-write/</guid>
      <description>08:57 Monday 06 May 2019 JST Atom editor has a way to write my own autocomplete rules. I don&amp;rsquo;t have a link handy, but it is handy for making links.
So I have a two part approach:
 create a file with Emacs by entering a Title (part name), Shortcode, Image, Tag(s), and date. Emacs creates the new file as part_name.md and now appends to the Atom file ~/.atom/snippets.cson the information necessary to let Atom auto complete the markdown after I type the shortcode.</description>
    </item>
    
    <item>
      <title>autocompletes in Atom</title>
      <link>https://new.robnugen.com/journal/2019/05/04/autocompletes-in-atom/</link>
      <pubDate>Sat, 04 May 2019 22:06:33 +0900</pubDate>
      
      <guid>https://new.robnugen.com/journal/2019/05/04/autocompletes-in-atom/</guid>
      <description> 22:06 Saturday 04 May 2019 JST Fantastic! Atom has a pretty easy way to auto-complete my custom strings in markdown format. I now can type cs and it will offer to autocomplete &amp;lsquo;Caret Splitter&amp;rsquo; as [Caret Splitter](/parts/caret-splitter/)
Here is the first draft of snippets.cson, before expanding the URLs to their full selves (and save a redirect with each click).
&#39;.source.gfm&#39;: &#39;Back Right Medium Landing Zone&#39;: &#39;prefix&#39;: &#39;brmlz&#39; &#39;body&#39;: &#39;[Back Right Medium Landing Zone](/p/brmlz)&#39; &#39;Bar Below Circle by Caret Splitter&#39;: &#39;prefix&#39;: &#39;bbcbcs&#39; &#39;body&#39;: &#39;[Bar Below Circle by Caret Splitter](/p/bbcbcs)&#39; &#39;Bearing&#39;: &#39;prefix&#39;: &#39;bearing&#39; &#39;body&#39;: &#39;[Bearing](/p/bearing)&#39; &#39;Below Lower Zig Zag Track&#39;: &#39;prefix&#39;: &#39;blzzt&#39; &#39;body&#39;: &#39;[Below Lower Zig Zag Track](/p/blzzt)&#39; &#39;Caret Splitter Backboard&#39;: &#39;prefix&#39;: &#39;csb&#39; &#39;body&#39;: &#39;[Caret Splitter Backboard](/p/csb)&#39; &#39;Caret Splitter Feeder Extension Reflection Second Stanchion&#39;: &#39;prefix&#39;: &#39;csfer2s&#39; &#39;body&#39;: &#39;[Caret Splitter Feeder Extension Reflection Second Stanchion](/p/csfer2s)&#39; &#39;Caret Splitter Feeder Extension Reflection Stanchion&#39;: &#39;prefix&#39;: &#39;csfers&#39; &#39;body&#39;: &#39;[Caret Splitter Feeder Extension Reflection Stanchion](/p/csfers)&#39; &#39;Caret Splitter Feeder Extension Reflection&#39;: &#39;prefix&#39;: &#39;csfer&#39; &#39;body&#39;: &#39;[Caret Splitter Feeder Extension Reflection](/p/csfer)&#39; &#39;Caret Splitter Feeder Extension&#39;: &#39;prefix&#39;: &#39;csfe&#39; &#39;body&#39;: &#39;[Caret Splitter Feeder Extension](/p/csfe)&#39; &#39;Caret Splitter Feeder&#39;: &#39;prefix&#39;: &#39;csf&#39; &#39;body&#39;: &#39;[Caret Splitter Feeder](/p/csf)&#39; &#39;Caret Splitter Right Hand Inner Side&#39;: &#39;prefix&#39;: &#39;csrhis&#39; &#39;body&#39;: &#39;[Caret Splitter Right Hand Inner Side](/p/csrhis)&#39; &#39;Caret Splitter Right Track&#39;: &#39;prefix&#39;: &#39;csrt&#39; &#39;body&#39;: &#39;[Caret Splitter Right Track](/p/csrt)&#39; &#39;Caret Splitter Rudder&#39;: &#39;prefix&#39;: &#39;csr&#39; &#39;body&#39;: &#39;[Caret Splitter Rudder](/parts/caret-splitter-rudder/)&#39; &#39;Caret Splitter&#39;: &#39;prefix&#39;: &#39;cs&#39; &#39;body&#39;: &#39;[Caret Splitter](/parts/caret-splitter/)&#39; &#39;Circle by the Caret Splitter&#39;: &#39;prefix&#39;: &#39;cbtcs&#39; &#39;body&#39;: &#39;[Circle by the Caret Splitter](/p/cbtcs)&#39; &#39;Decorative Walls after the Lowest Small-Medium Splitter&#39;: &#39;prefix&#39;: &#39;dwatlsms&amp;quot;&#39; &#39;body&#39;: &#39;[Decorative Walls after the Lowest Small-Medium Splitter](/p/dwatlsms&amp;quot;)&#39; &#39;Eighth Placed Outer Spiral Support&#39;: &#39;prefix&#39;: &#39;8poss&#39; &#39;body&#39;: &#39;[Eighth Placed Outer Spiral Support](/p/8poss)&#39; &#39;Fifth Placed Outer Spiral Support&#39;: &#39;prefix&#39;: &#39;5poss&#39; &#39;body&#39;: &#39;[Fifth Placed Outer Spiral Support](/p/5poss)&#39; &#39;First Placed Outer Spiral Support&#39;: &#39;prefix&#39;: &#39;1poss&#39; &#39;body&#39;: &#39;[First Placed Outer Spiral Support](/p/1poss)&#39; &#39;First Snake-Installed Rail&#39;: &#39;prefix&#39;: &#39;fsir&#39; &#39;body&#39;: &#39;[First Snake-Installed Rail](/p/fsir)&#39; &#39;Fourth Placed Outer Spiral Support&#39;: &#39;prefix&#39;: &#39;4poss&#39; &#39;body&#39;: &#39;[Fourth Placed Outer Spiral Support](/p/4poss)&#39; &#39;Front Left Medium Landing Zone&#39;: &#39;prefix&#39;: &#39;flmlz&#39; &#39;body&#39;: &#39;[Front Left Medium Landing Zone](/p/flmlz)&#39; &#39;Guides into Back Right Medium Landing Zone&#39;: &#39;prefix&#39;: &#39;gibrmlz&#39; &#39;body&#39;: &#39;[Guides into Back Right Medium Landing Zone](/p/gibrmlz)&#39; &#39;Left Side Small Landing Zone&#39;: &#39;prefix&#39;: &#39;lsslz&#39; &#39;body&#39;: &#39;[Left Side Small Landing Zone](/p/lsslz)&#39; &#39;Little Wiggly Track&#39;: &#39;prefix&#39;: &#39;lwt&#39; &#39;body&#39;: &#39;[Little Wiggly Track](/p/lwt)&#39; &#39;Lower Curver off the Lowest Small-Medium Splitter&#39;: &#39;prefix&#39;: &#39;lcotlsms&#39; &#39;body&#39;: &#39;[Lower Curver off the Lowest Small-Medium Splitter](/p/lcotlsms)&#39; &#39;Lower Zig Zag 2 ban top&#39;: &#39;prefix&#39;: &#39;lzz2bt&#39; &#39;body&#39;: &#39;[Lower Zig Zag 2 ban top](/p/lzz2bt)&#39; &#39;Lower Zig Zag 2 ban&#39;: &#39;prefix&#39;: &#39;lzz2b&#39; &#39;body&#39;: &#39;[Lower Zig Zag 2 ban](/p/lzz2b)&#39; &#39;Lower Zig Zag 3 ban base&#39;: &#39;prefix&#39;: &#39;lzz3bb&#39; &#39;body&#39;: &#39;[Lower Zig Zag 3 ban base](/p/lzz3bb)&#39; &#39;Lower Zig Zag 3 ban&#39;: &#39;prefix&#39;: &#39;lzz3b&#39; &#39;body&#39;: &#39;[Lower Zig Zag 3 ban](/p/lzz3b)&#39; &#39;Lower Zig Zag 3ban Upper Base Base&#39;: &#39;prefix&#39;: &#39;lzz3bubb&#39; &#39;body&#39;: &#39;[Lower Zig Zag 3ban Upper Base Base](/p/lzz3bubb)&#39; &#39;Lower Zig Zag Net&#39;: &#39;prefix&#39;: &#39;lzzn&#39; &#39;body&#39;: &#39;[Lower Zig Zag Net](/p/lzzn)&#39; &#39;Lower Zig Zag&#39;: &#39;prefix&#39;: &#39;lzz&#39; &#39;body&#39;: &#39;[Lower Zig Zag](/parts/lower_zig_zag/)&#39; &#39;Lowest Back Left Small Marble Curve&#39;: &#39;prefix&#39;: &#39;lblsmc&#39; &#39;body&#39;: &#39;[Lowest Back Left Small Marble Curve](/p/lblsmc)&#39; &#39;Lowest Largest Backtracking Chopstick&#39;: &#39;prefix&#39;: &#39;llbc&#39; &#39;body&#39;: &#39;[Lowest Largest Backtracking Chopstick](/p/llbc)&#39; &#39;Lowest Largest Backtracking Popsicle Stick&#39;: &#39;prefix&#39;: &#39;llbps&#39; &#39;body&#39;: &#39;[Lowest Largest Backtracking Popsicle Stick](/p/llbps)&#39; &#39;Lowest Largest U-Turn&#39;: &#39;prefix&#39;: &#39;llut&amp;quot;&#39; &#39;body&#39;: &#39;[Lowest Largest U-Turn](/p/llut&amp;quot;)&#39; &#39;Medium Catcher Below Triple Splitter&#39;: &#39;prefix&#39;: &#39;mcbts&#39; &#39;body&#39;: &#39;[Medium Catcher Below Triple Splitter](/p/mcbts)&#39; &#39;Ninth Placed Outer Spiral Support&#39;: &#39;prefix&#39;: &#39;9poss&#39; &#39;body&#39;: &#39;[Ninth Placed Outer Spiral Support](/p/9poss)&#39; &#39;Outer Spiral&#39;: &#39;prefix&#39;: &#39;os&#39; &#39;body&#39;: &#39;[Outer Spiral](/p/os)&#39; &#39;Right Side Small Landing Zone&#39;: &#39;prefix&#39;: &#39;rsslz&#39; &#39;body&#39;: &#39;[Right Side Small Landing Zone](/p/rsslz)&#39; &#39;Second Placed Outer Spiral Support&#39;: &#39;prefix&#39;: &#39;2poss&#39; &#39;body&#39;: &#39;[Second Placed Outer Spiral Support](/p/2poss)&#39; &#39;Seventh Placed Outer Spiral Support&#39;: &#39;prefix&#39;: &#39;7poss&#39; &#39;body&#39;: &#39;[Seventh Placed Outer Spiral Support](/p/7poss)&#39; &#39;Sixth Placed Outer Spiral Support&#39;: &#39;prefix&#39;: &#39;6poss&#39; &#39;body&#39;: &#39;[Sixth Placed Outer Spiral Support](/p/6poss)&#39; &#39;Snake Plate Chopstick&#39;: &#39;prefix&#39;: &#39;spc&#39; &#39;body&#39;: &#39;[Snake Plate Chopstick](/p/spc)&#39; &#39;Snake Plate U Turn&#39;: &#39;prefix&#39;: &#39;sput&#39; &#39;body&#39;: &#39;[Snake Plate U Turn](/p/sput)&#39; &#39;Snake Plate U-Turn Berm&#39;: &#39;prefix&#39;: &#39;sputb&amp;quot;&#39; &#39;body&#39;: &#39;[Snake Plate U-Turn Berm](/p/sputb&amp;quot;)&#39; &#39;Snake Plate U-turn Berm Bar&#39;: &#39;prefix&#39;: &#39;sputbb&#39; &#39;body&#39;: &#39;[Snake Plate U-turn Berm Bar](/p/sputbb)&#39; &#39;Snake Plate&#39;: &#39;prefix&#39;: &#39;sp&#39; &#39;body&#39;: &#39;[Snake Plate](/p/sp)&#39; &#39;The First Track&#39;: &#39;prefix&#39;: &#39;tft&#39; &#39;body&#39;: &#39;[The First Track](/p/tft)&#39; &#39;Third Placed Outer Spiral Support&#39;: &#39;prefix&#39;: &#39;3poss&#39; &#39;body&#39;: &#39;[Third Placed Outer Spiral Support](/p/3poss)&#39; &#39;Triple Splitter Small Feeder Inner Bar Lower Support&#39;: &#39;prefix&#39;: &#39;tssfibls&#39; &#39;body&#39;: &#39;[Triple Splitter Small Feeder Inner Bar Lower Support](/p/tssfibls)&#39; &#39;Triple Splitter Small Feeder Inner Bar&#39;: &#39;prefix&#39;: &#39;tssfib&#39; &#39;body&#39;: &#39;[Triple Splitter Small Feeder Inner Bar](/p/tssfib)&#39; &#39;Triple Splitter Small Feeder Outer Bar Lower Support&#39;: &#39;prefix&#39;: &#39;tssfobls&#39; &#39;body&#39;: &#39;[Triple Splitter Small Feeder Outer Bar Lower Support](/p/tssfobls)&#39; &#39;Triple Splitter Small Feeder Outer Bar&#39;: &#39;prefix&#39;: &#39;tssfob&#39; &#39;body&#39;: &#39;[Triple Splitter Small Feeder Outer Bar](/p/tssfob)&#39; &#39;Triple Splitter Small Feeder&#39;: &#39;prefix&#39;: &#39;tssf&#39; &#39;body&#39;: &#39;[Triple Splitter Small Feeder](/parts/triple-splitter-small-feeder/)&#39; &#39;Triple Splitter&#39;: &#39;prefix&#39;: &#39;ts&#39; &#39;body&#39;: &#39;[Triple Splitter](/parts/triple_splitter/)&#39; &#39;Two Ends Chopped Off Triple Splitter&#39;: &#39;prefix&#39;: &#39;tecots&#39; &#39;body&#39;: &#39;[Two Ends Chopped Off Triple Splitter](/p/tecots)&#39; &#39;Upper Splitter off the Lowest Small-Medium Splitter&#39;: &#39;prefix&#39;: &#39;usotlsms&#39; &#39;body&#39;: &#39;[Upper Splitter off the Lowest Small-Medium Splitter](/p/usotlsms)&#39; &#39;the Lowest Small-Medium Splitter&#39;: &#39;prefix&#39;: &#39;tlsms&#39; &#39;body&#39;: &#39;[the Lowest Small-Medium Splitter](/p/tlsms)&#39; &#39;the Triple Splitter Small Marble Catcher&#39;: &#39;prefix&#39;: &#39;ttssmc&#39; &#39;body&#39;: &#39;[the Triple Splitter Small Marble Catcher](/p/ttssmc)&#39; &#39;円周螺旋&#39;: &#39;prefix&#39;: &#39;os&#39; &#39;body&#39;: &#39;[円周螺旋](/p/os)&#39;  </description>
    </item>
    
    <item>
      <title>how to find last slash on line while recording macro in Atom</title>
      <link>https://new.robnugen.com/journal/2019/05/04/how-to-find-last-slash-on-line-while-recording-macro-in-atom/</link>
      <pubDate>Sat, 04 May 2019 21:44:09 +0900</pubDate>
      
      <guid>https://new.robnugen.com/journal/2019/05/04/how-to-find-last-slash-on-line-while-recording-macro-in-atom/</guid>
      <description>21:44 Saturday 04 May 2019 JST In my workflow, I end up with image URLs like this
https://b.robnugen.com/art/marble_track_3/track/parts/2019/2019_may_03_caret_splitter_rudder_planner_3.jpg  and I want to convert them to markdown with thumbnail like this:
[![2019 may 03 caret splitter rudder planner 3](//b.robnugen.com/art/marble_track_3/track/parts/2019/thumbs/2019_may_03_caret_splitter_rudder_planner_3.jpg)](//b.robnugen.com/art/marble_track_3/track/parts/2019/2019_may_03_caret_splitter_rudder_planner_3.jpg)  (N.B. the title came from the image filename, and thumbs/ has been inserted into the thumbnail&amp;rsquo;s URL)
With Emacs, I can do it with a custom keyboard macro, which starts by moving point to the end of the image URL then I-search backward to find the last / in the URL.</description>
    </item>
    
  </channel>
</rss>